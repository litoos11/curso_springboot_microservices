package com.litoos11.micro.app.usuarios.controllers;

import java.io.IOException;
import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.litoos11.micro.app.usuarios.services.AlumnoService;
import com.litoos11.micro.commons.alumnos.entitys.Alumno;
import com.litoos11.micro.commons.controllers.CommonController;

@RestController
public class AlumnoController extends CommonController<Alumno, AlumnoService> {

	@GetMapping("/alumnos-por-curso")
	public ResponseEntity<?> obtenerAlumnosPorCurso(@RequestParam List<Long> ids){
		return ResponseEntity.ok(service.findAllById(ids));
	}
	
	@GetMapping("/uploads/img/{id}")
	public ResponseEntity<?> viewPhoto(@PathVariable Long id) {

		Optional<Alumno> optionalAlumno = service.findById(id);

		if (optionalAlumno.isEmpty() || optionalAlumno.get().getFoto() == null) {
			return ResponseEntity.notFound().build();
		}

		Resource imagen = new ByteArrayResource(optionalAlumno.get().getFoto());
		
		return ResponseEntity.ok().contentType(MediaType.IMAGE_JPEG).body(imagen);
	}

	@PutMapping("/{id}")
	public ResponseEntity<?> update(@Valid @RequestBody Alumno alumno, BindingResult result, @PathVariable Long id) {

		if (result.hasErrors()) {
			return this.validar(result);
		}

		Optional<Alumno> optionalAlumno = service.findById(id);

		if (optionalAlumno.isEmpty()) {
			return ResponseEntity.notFound().build();
		}

		Alumno alumnoSave = optionalAlumno.get();
		alumnoSave.setNombre(alumno.getNombre());
		alumnoSave.setApellido(alumno.getApellido());
		alumnoSave.setEmail(alumno.getEmail());

		return ResponseEntity.status(HttpStatus.CREATED).body(service.save(alumnoSave));
	}

	@GetMapping("/buscar/{search}")
	public ResponseEntity<?> findBySearch(@PathVariable String search) {
		return ResponseEntity.ok(service.findByNombreOrApellido(search));
	}

	@PostMapping("/crear-con-foto")
	public ResponseEntity<?> saveWithPhoto(@Valid Alumno alumno, BindingResult result,
			@RequestParam MultipartFile archivo) throws IOException {
		if (!archivo.isEmpty()) {
			alumno.setFoto(archivo.getBytes());
		}
		return super.save(alumno, result);
	}

	@PutMapping("/editar-con-foto/{id}")
	public ResponseEntity<?> updateWithPhoto(@Valid Alumno alumno, BindingResult result, @PathVariable Long id,
			@RequestParam MultipartFile archivo) throws IOException {

		if (result.hasErrors()) {
			return this.validar(result);
		}

		Optional<Alumno> optionalAlumno = service.findById(id);

		if (optionalAlumno.isEmpty()) {
			return ResponseEntity.notFound().build();
		}

		Alumno alumnoSave = optionalAlumno.get();
		alumnoSave.setNombre(alumno.getNombre());
		alumnoSave.setApellido(alumno.getApellido());
		alumnoSave.setEmail(alumno.getEmail());

		if (!archivo.isEmpty()) {
			alumnoSave.setFoto(archivo.getBytes());
		}

		return ResponseEntity.status(HttpStatus.CREATED).body(service.save(alumnoSave));
	}
}
